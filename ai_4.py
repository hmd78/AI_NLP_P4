# -*- coding: utf-8 -*-
"""AI_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11YYbqJcMbGVWUOIA6EqcsC9khOEVlnia
"""

import pandas as pd
import linecache as lc
from pandas import DataFrame
import re
import string
from sklearn.model_selection import train_test_split

Neg_path = '/content/drive/MyDrive/Colab Notebooks/AI_4/rt-polarity.neg'
Pos_path = '/content/drive/MyDrive/Colab Notebooks/AI_4/rt-polarity.pos'

Neg_data = []
with open (Neg_path, "r") as f:
  for line in f:
    Neg_data.append(line.strip())

Pos_data = []
with open (Pos_path, "r") as f:
  for line in f:
    Pos_data.append(line.strip())

"""training and testing data

"""

Neg = DataFrame(Neg_data, columns=['Data'])
Pos = DataFrame(Pos_data, columns=['Data'])
Neg_df, testing_Neg_df = train_test_split(Neg, test_size=0.1, random_state=25)
Pos_df, testing_Pos_df = train_test_split(Pos, test_size=0.1, random_state=25)
Neg_df = Neg_df.reset_index()
Pos_df = Pos_df.reset_index()

"""fuction for remove punctuations"""

def clean_text(text):
  # remove numbers
  text_nonum = re.sub(r'\d+', '', text)
  # remove punctuations and convert characters to lower case
  text_nopunct = "".join([char.lower() for char in text_nonum if char not in string.punctuation]) 
  # substitute multiple whitespace with single whitespace
  # Also, removes leading and trailing whitespaces
  return text_nopunct

Neg_list = []
for i in range(len(Neg_df['Data'])):
  temp = Neg_df['Data'][i]
  cleaned_data = clean_text(temp)
  Neg_list.append(cleaned_data)

Pos_list = []
for i in range(len(Pos_df['Data'])):
  temp = Pos_df['Data'][i]
  cleaned_data = clean_text(temp)
  Pos_list.append(cleaned_data)

Neg_unigram={}#dictionary of unigram model
for i in range(len(Neg_list)):
  temp = Neg_list[i].split()
  for j in range(len(temp)):
    if temp[j] in Neg_unigram:
      Neg_unigram[temp[j]]+=1
    else:
      Neg_unigram[temp[j]]=1
#calculate zerogram from unigram
Neg_zerogram=1/len(Neg_unigram)

Pos_unigram={}#dictionary of unigram model
for i in range(len(Pos_list)):
  temp = Pos_list[i].split()
  for j in range(len(temp)):
    if temp[j] in Pos_unigram:
      Pos_unigram[temp[j]]+=1
    else:
      Pos_unigram[temp[j]]=1
#calculate zerogram from unigram
Pos_zerogram=1/len(Pos_unigram)

#making bigram model
Neg_bigram={}#dictionary of bigram model
for i in range(len(Neg_list)):
  temp = Neg_list[i].split()
  for j in range(len(temp)-1):
    if temp[j] in Neg_bigram and temp[j+1] in Neg_bigram[temp[j]]:
      Neg_bigram[temp[j]][temp[j+1]]+=1
    else:
      if (temp[j] in Neg_bigram)==False:
        Neg_bigram[temp[j]]={}
      Neg_bigram[temp[j]][temp[j+1]]=1

#making bigram model
Pos_bigram={}#dictionary of bigram model
for i in range(len(Pos_list)):
  temp = Pos_list[i].split()
  for j in range(len(temp)-1):
    if temp[j] in Pos_bigram and temp[j+1] in Pos_bigram[temp[j]]:
      Pos_bigram[temp[j]][temp[j+1]]+=1
    else:
      if (temp[j] in Pos_bigram)==False:
        Pos_bigram[temp[j]]={}
      Pos_bigram[temp[j]][temp[j+1]]=1

"""accuracy function for test

"""

def accuracy(label):
  c = 0
  for i in range(len(label)):
    if label[i] == 0:
      c = c + 1
  print(c/ len(label))

"""Bigram model"""

neg_test=testing_Pos_df.reset_index()
label = []
while True:
  x = input("Enter a text: ")
  if x == '!q':
    break
  a = clean_text(x).split()
  epsilon = 0.0001
  landa1 = 0.9
  landa2 = 0.09
  landa3 = 0.01
  P = 1
  N=sum(Neg_unigram.values())


  for i in range(len(a)):
    if i == 0:
      if a[0] in Neg_unigram.keys():
        Pwi = Neg_unigram[a[0]] / N
      else:
        Pwi = Neg_zerogram
    else:
      if a[i-1] in Neg_bigram.keys():
        if a[i] in Neg_bigram[a[i-1]].keys():
          count_w_w = Neg_bigram[a[i-1]][a[i]]
        else:
          count_w_w = 0
        prob1 = count_w_w / Neg_unigram[a[i-1]]
      else:
        prob1 = 0

      if a[i] in Neg_unigram.keys():
        prob2 = Neg_unigram[a[i]] / N
      else:
        prob2 = Neg_zerogram
      prob = landa1 * prob1 + landa2 * prob2 + landa3 * epsilon
      P = P * prob
  P_N = P * Pwi



  epsilon = 0.0001
  landa1 = 0.9
  landa2 = 0.09
  landa3 = 0.01
  P = 1
  N=sum(Pos_unigram.values())

  for i in range(len(a)):
    if i == 0:
      if a[0] in Pos_unigram.keys():
        Pwi = Pos_unigram[a[0]] / N
      else:
        Pwi = Pos_zerogram
    else:
      if a[i-1] in Pos_bigram.keys():
        if a[i] in Pos_bigram[a[i-1]].keys():
          count_w_w = Pos_bigram[a[i-1]][a[i]]
        else:
          count_w_w = 0
        prob1 = count_w_w / Pos_unigram[a[i-1]]
      else:
        prob1 = 0

      if a[i] in Pos_unigram.keys():
        prob2 = Pos_unigram[a[i]] / N
      else:
        prob2 = Pos_zerogram
      prob = landa1 * prob1 + landa2 * prob2 + landa3 * epsilon
      P = P * prob
  P_P = P * Pwi
  if (P_P > P_N):
    print("‫‪not‬‬ ‫‪filter‬‬ ‫‪this‬‬")
  else:
    print("‫‪‫‪filter‬‬ ‫‪this‬‬")

"""Unigram model"""

def Unigram_model(temp, dic, zerogram):
  P = 1
  N = sum(dic.values())
  for i in range(len(temp)):
    if temp[i] in dic.keys():
      Pwi = dic[a[i]] / N
    else:
      Pwi = zerogram
    P = P * Pwi
  return P

test = testing_Neg_df.reset_index()
label = []
while True:
  x = input("Enter a text: ")
  if x == '!q':
    break
  a = clean_text(x).split()
  P_neg = Unigram_model(a, Neg_unigram, Neg_zerogram)
  P_pos = Unigram_model(a, Pos_unigram, Pos_zerogram)
  if (P_pos > P_neg):
    print("‫‪not‬‬ ‫‪filter‬‬ ‫‪this‬‬")
  else:
    print("‫‪‫‪filter‬‬ ‫‪this‬‬")